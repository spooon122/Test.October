@page
@model Test.October.Pages.GraphStats
@{
    ViewData["Title"] = "PnL Graph";
}

<!-- Element for displaying the chart -->
<canvas id="pnlChart" width="400" height="200"></canvas>

<!-- Include Chart.js via CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    // Fetching data from the model as JSON
    var tradesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TradesWithPnL));

    // Function to format date
    function formatDate(dateString) {
        const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
        return new Date(dateString).toLocaleDateString('en-US', options);
    }

    // Separating data for the chart with formatted dates
    var labels = tradesData.map(function(trade) {
        return trade.Ticker + ' ' + formatDate(trade.OpenTime); // Labels - ticker and formatted opening time
    });

    var pnlData = tradesData.map(function(trade) {
        return trade.PnL;  // PnL data for each trade
    });

    // Creating the chart using Chart.js
    var ctx = document.getElementById('pnlChart').getContext('2d');
    var pnlChart = new Chart(ctx, {
        type: 'line', // Chart type - line
        data: {
            labels: labels,
            datasets: [{
                label: 'PnL (%)',
                data: pnlData,
                borderColor: 'rgba(75, 192, 192, 1)', // Line color
                backgroundColor: 'rgba(75, 192, 192, 0.2)', // Background color under the line
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: false // Y-axis does not start at zero because PnL can be negative
                }
            }
        }
    });
</script>